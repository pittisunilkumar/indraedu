"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const localForage = require("localforage");
const middleware_storage_1 = require("./middleware-storage");
const options_1 = require("./options");
const storage_sync_1 = require("./storage-sync");
exports.getAllDataFromLocalForage = (options) => {
    options_1.config.keys = options.keys;
    options_1.config.storage = middleware_storage_1.middlewareStorage;
    localForage.config({
        driver: options.driver || localForage.LOCALSTORAGE,
        name: 'NGRX Storage',
        version: 1.0,
        size: 4980736,
        storeName: 'keyvaluepairs',
        description: 'NGRX storage persist'
    });
    return localForage.keys()
        .then(keys => {
        return Promise.all(keys.map((key) => localForage.getItem(key).then(data => [key, data])));
    })
        .then(dataWithKeys => {
        const dataStorage = dataWithKeys.reduce((previousValue, [key, data]) => {
            previousValue[key] = data;
            return previousValue;
        }, {});
        middleware_storage_1.middlewareStorage.dataStorage = dataStorage;
        return dataStorage;
    });
};
function storageSyncMetaReducer(reducer) {
    return storage_sync_1.storageSync(reducer);
}
exports.storageSyncMetaReducer = storageSyncMetaReducer;
exports.default = localForage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFDM0MsNkRBQXVEO0FBQ3ZELHVDQUFnRDtBQUNoRCxpREFBMkM7QUFFOUIsUUFBQSx5QkFBeUIsR0FBRyxDQUFDLE9BQXNCLEVBQUUsRUFBRTtJQUNsRSxnQkFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzNCLGdCQUFNLENBQUMsT0FBTyxHQUFHLHNDQUFpQixDQUFDO0lBQ25DLFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDakIsTUFBTSxFQUFRLE9BQU8sQ0FBQyxNQUFNLElBQUksV0FBVyxDQUFDLFlBQVk7UUFDeEQsSUFBSSxFQUFVLGNBQWM7UUFDNUIsT0FBTyxFQUFPLEdBQUc7UUFDakIsSUFBSSxFQUFVLE9BQU87UUFDckIsU0FBUyxFQUFLLGVBQWU7UUFDN0IsV0FBVyxFQUFHLHNCQUFzQjtLQUNyQyxDQUFDLENBQUM7SUFFSCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUU7U0FDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1gsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUNoQixJQUFJLENBQUMsR0FBRyxDQUNOLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQzVELENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUNuQixNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBa0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQzFFLGFBQWEsQ0FBUyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDbEMsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ1Asc0NBQWlCLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUM1QyxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQztBQUVGLFNBQWdCLHNCQUFzQixDQUNsQyxPQUFZO0lBRWQsT0FBTywwQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFKRCx3REFJQztBQUVELGtCQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxvY2FsRm9yYWdlIGZyb20gJ2xvY2FsZm9yYWdlJztcclxuaW1wb3J0IHttaWRkbGV3YXJlU3RvcmFnZX0gZnJvbSBcIi4vbWlkZGxld2FyZS1zdG9yYWdlXCI7XHJcbmltcG9ydCB7Y29uZmlnLCBTdG9yYWdlQ29uZmlnfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcbmltcG9ydCB7c3RvcmFnZVN5bmN9IGZyb20gXCIuL3N0b3JhZ2Utc3luY1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEFsbERhdGFGcm9tTG9jYWxGb3JhZ2UgPSAob3B0aW9uczogU3RvcmFnZUNvbmZpZykgPT4ge1xyXG4gIGNvbmZpZy5rZXlzID0gb3B0aW9ucy5rZXlzO1xyXG4gIGNvbmZpZy5zdG9yYWdlID0gbWlkZGxld2FyZVN0b3JhZ2U7XHJcbiAgbG9jYWxGb3JhZ2UuY29uZmlnKHtcclxuICAgIGRyaXZlciAgICAgIDogb3B0aW9ucy5kcml2ZXIgfHwgbG9jYWxGb3JhZ2UuTE9DQUxTVE9SQUdFLFxyXG4gICAgbmFtZSAgICAgICAgOiAnTkdSWCBTdG9yYWdlJyxcclxuICAgIHZlcnNpb24gICAgIDogMS4wLFxyXG4gICAgc2l6ZSAgICAgICAgOiA0OTgwNzM2LFxyXG4gICAgc3RvcmVOYW1lICAgOiAna2V5dmFsdWVwYWlycycsXHJcbiAgICBkZXNjcmlwdGlvbiA6ICdOR1JYIHN0b3JhZ2UgcGVyc2lzdCdcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGxvY2FsRm9yYWdlLmtleXMoKVxyXG4gICAgLnRoZW4oa2V5cyA9PiB7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChcclxuICAgICAgICBrZXlzLm1hcChcclxuICAgICAgICAgIChrZXkpID0+IGxvY2FsRm9yYWdlLmdldEl0ZW0oa2V5KS50aGVuKGRhdGEgPT4gW2tleSwgZGF0YV0pXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfSlcclxuICAgIC50aGVuKGRhdGFXaXRoS2V5cyA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGFTdG9yYWdlID0gZGF0YVdpdGhLZXlzLnJlZHVjZSgocHJldmlvdXNWYWx1ZTogYW55LCBba2V5LCBkYXRhXSkgPT4ge1xyXG4gICAgICAgIHByZXZpb3VzVmFsdWVbPHN0cmluZz5rZXldID0gZGF0YTtcclxuICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZTtcclxuICAgICAgfSwge30pO1xyXG4gICAgICBtaWRkbGV3YXJlU3RvcmFnZS5kYXRhU3RvcmFnZSA9IGRhdGFTdG9yYWdlO1xyXG4gICAgICByZXR1cm4gZGF0YVN0b3JhZ2U7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9yYWdlU3luY01ldGFSZWR1Y2VyKFxyXG4gICAgcmVkdWNlcjogYW55XHJcbik6IGFueSB7XHJcbiAgcmV0dXJuIHN0b3JhZ2VTeW5jKHJlZHVjZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBsb2NhbEZvcmFnZTtcclxuIl19